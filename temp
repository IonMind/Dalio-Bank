package io.daliobank.account_service.domain;

public class SavingsAccount extends BaseAccount {
    private Long INTEREST_RATE = 4L;
    private Integer DAILY_TRANSACTION_LIMIT = 5;
    private static final double MINIMUM_BALANCE = 1000.0;

    public SavingsAccount(Long accountNumber, String accountHolderName, double initialBalance, Long interestRate,
            Integer dailyTransactionLimit) {
        super(accountNumber, accountHolderName, "Savings", initialBalance);
        if (initialBalance < MINIMUM_BALANCE) {
            throw new IllegalArgumentException(
                    "Initial balance must be at least " + MINIMUM_BALANCE + " for " + getAccountType() + " account.");

        }
        this.INTEREST_RATE = interestRate;
        this.DAILY_TRANSACTION_LIMIT = dailyTransactionLimit;
    }

    @Override
    public Long getInterestRate() {
        return INTEREST_RATE;
    }

    @Override
    public Integer getDailyTransactionLimit() {
        return DAILY_TRANSACTION_LIMIT;
    }

}




package io.daliobank.account_service.domain;

import io.daliobank.account_service.domain.interfaces.Account;

public abstract class BaseAccount implements Account {
    private Long accountNumber;
    private String accountHolderName;
    private String accountType;
    private double balance;

    protected BaseAccount(Long accountNumber, String accountHolderName, String accountType, double initialBalance) {
        if (accountNumber == null || accountHolderName == null || accountType == null || initialBalance < 0) {
            throw new IllegalArgumentException(
                    "Error: Either Account number, holder name, and account type is null or balance is less than zero");
        }
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.accountType = accountType;
        this.balance = initialBalance;
    }

    public Long getAccountNumber() {
        return accountNumber;
    }

    public String getAccountHolderName() {
        return accountHolderName;
    }

    public String getAccountType() {
        return accountType;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            throw new IllegalArgumentException("Deposit amount must be more than zero");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
        } else {
            throw new IllegalArgumentException(
                    "Withdrawal amount must be positive and less than or equal to the current balance");
        }
    }

    public abstract Long getInterestRate();

    public abstract Integer getDailyTransactionLimit();

}
